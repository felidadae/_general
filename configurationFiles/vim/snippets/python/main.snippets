##
#File I/O
##
snippet readFileIntoString "read the whole file into var" b
import codecs
fref = codecs.open(${1:fileName}, 'r', 'utf-8')
fContent = fref.read()
fref.close()
endsnippet

snippet readFileForLine "read file line by line" b
import codecs
fref = codecs.open(${1:fileName}, 'r', 'utf-8')
for line in fref:
	line = line.rstrip()
	#regex for regexing
	${0}
fref.close()
endsnippet

snippet openFile "open a file with filename from argv" b
${1:refFile} = codecs.open(argv_[${2:0}], '${3:r}', 'utf-8')
endsnippet

snippet writeToFile  "open file, write to file string, close file" b
import codecs		
fref = codecs.open(${1:fileName}, 'a+', 'utf-8')
fref.write("${2:stringToWrite}")
fref.close()
endsnippet

snippet filterScript "fileIn, fileOut from argv, for each line fileIn" b
import sys
import os
import codecs
import re

fileIn = sys.argv[1]
fileOut= sys.argv[2]

if os.path.isfile(fileIn):
	fileIn_ = codecs.open(fileIn, 'r', 'utf-8')
else:
	print "[Error] Input file does not exits."
	exit(1)
fileOut_ = codecs.open(fileOut, 'w+', 'utf-8')

for l in fileIn_:
	l = l.rstrip('\n')
	# Do sth with line
endsnippet

snippet writeToFile  "open, write given var to file, close file" b
import codecs		
fref = codecs.open(${1:fileName}, 'a+', 'utf-8')
fref.write("${2:stringToWrite}")
fref.close()
endsnippet


##
#Regex
##
snippet regexSearch "Search for regex in string;" b
s = re.search("${1:pattern}", ${2:string})
if s: group1 = s.group(1)
${0}
endsnippet

snippet regexSearchLonger "Search for regex in string; group1 group1" b
import re
s = re.search("${1:pattern}", ${2:string})
if s:
	group1 = s.group(1)
	group2 = s.group(2)
	${0}
endsnippet

snippet regexFindall "Search for regex and return array of all matches" b
results = re.findall("${1:pattern}", ${2:string}, re.X)
if len(results):
	for matches in results:
		# captured groups are in matches
		${3:pass}
endsnippet

snippet ifregex "" b
if re.match("${1:pattern}", ${2:string}):
	${0}
endsnippet

snippet breakpoint "ipdb breakpoint" b
import ipdb; ipdb.set_trace()
endsnippet

snippet systemcheck "check platform" b
from sys import platform as _platform
if _platform == "linux" or _platform == "linux2":
    # linux
    pass
elif _platform == "darwin":
    # OS X
    pass
elif _platform == "win32":
    # Windows...
    pass
endsnippet

snippet stru "python 2 utf8 string" b
${1:sentence} = unicode("${2:string}", 'utf8')
endsnippet

snippet time "to measure time execution" b
import time
def timeTest__${1}():
	def ${1:fun}():
		${2:YourCodeToTest}

	t0 = time.time()
	for i in xrange(1,${3:100}):
		${1}()
	t1 = time.time()
	print "Function ${1} has taken " + str((t1-t0)/${3}) + "[s]"
endsnippet


snippet currDate "current date string" b
import datetime
t_ = datetime.datetime.strftime(datetime.datetime.now(), '%Y%m%d%H%M')
endsnippet


snippet split "regex split" b
import re
${1:splitted} = re.split("${2:pattern}", ${3:string} )
endsnippet

snippet currPos "Position of this python file" b
import os
pathIn  = (os.path.dirname(os.path.abspath(__file__))
			+ "/${1:subdirectory}")
endsnippet

snippet convertToJSON "convert python data structure to JSON" b
import json
json.dumps(${1:dataStructure})
endsnippet

snippet standardImport "Standard imports for python" b
import sys
import os
import codecs
import re
endsnippet

snippet argvRead "Read command line arguments" b
argv_ = sys.argv[1:]
endsnippet

snippet ,l "length" b
len(${1:list})
endsnippet

snippet ,a "append to list" b
${1:list}.append(${2:elementtoadd})
endsnippet

snippet setCurrentDirectoryToTheFile "set current directory (os.getcwd() os.chdir()) to the file" b
import os
# print("Curr directory:" + os.getcwd()) 
pathToCurrFile = (os.path.dirname(os.path.abspath(__file__)))
os.chdir(pathToCurrFile)
import sys
sys.path.append("sub")
from someModule.someSubmodule import printShit
endsnippet

snippet appendPath "append to sys.path new path; check os.getcwd()" b
import sys
sys.path.append("${1}")
endsnippet
