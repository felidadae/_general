set <m-a>=^[a
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw
set timeout ttimeoutlen=50

set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree.git'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'ryanoasis/vim-devicons'
Plugin 'Valloric/YouCompleteMe'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'tpope/vim-commentary'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'tpope/vim-abolish'
Plugin 'vim-scripts/keepcase.vim'
Plugin 'qpkorr/vim-bufkill'
Plugin 'xolox/vim-session'
Plugin 'xolox/vim-misc'
Plugin 'ternjs/tern_for_vim'
Plugin 'majutsushi/tagbar'
Plugin 'godlygeek/tabular'
Plugin 'itchyny/vim-cursorword'
Plugin 'vim-scripts/Greplace.vim'
Plugin 'tikhomirov/vim-glsl'
Plugin 'easymotion/vim-easymotion'
Plugin 'vim-scripts/CmdlineComplete'
Plugin 'joonty/vdebug'
Plugin 'jiangmiao/auto-pairs'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'hdima/python-syntax'
" let g:ifGlobalPowerlineEnabled = ($IF_GLOBAL_POWERLINE_ENABLED != 1)
" if g:ifGlobalPowerlineEnabled
" 	Plugin 'vim-airline/vim-airline'
" 	let g:airline_powerline_fonts = 1
" 	let g:airline_theme='simple'
" endif
" PluginExtend
call vundle#end()            
filetype plugin indent on


"GUI OPTIONS
:set guioptions-=L  "remove left-hand scroll bar
:set guioptions-=m  "remove menu bar
:set guioptions-=T  "remove toolbar
:set guifont=Roboto\ Mono\ Medium\ for\ Powerline\ Medium\ 9 

"to run POWERLINE 
let g:remoteSession = ($SSH_CLIENT == "" || $SSH_CONNECTION == "")
" if g:remoteSession
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

"devicons
let g:webdevicons_enable_ctrlp = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
" call webdevicons#refresh()
"let g:webdevicons_conceal_nerdtree_brackets = 1
"let g:DevIconsEnableFoldersOpenClose = 1
" else
" 	:set t_ut=
" 	:set showtabline=0
" 	let g:webdevicons_enable = 0
" endif

" Colors
set background=dark
colorscheme solarized
:highlight nontext ctermfg=bg 
:hi folded term=none cterm=none ctermfg=green ctermbg=none
:hi foldcolumn ctermbg=none

"@Mappings
" Ctrl-j/k deletes blank line below/above, and Alt-j/k inserts.
nnoremap <silent><C-j> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent><C-k> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent><F2> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent><F3> :set paste<CR>m`O<Esc>``:set nopaste<CR>
inoremap jk <Esc>
nnoremap <m-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
:nnoremap _<space> i<space><esc>
:nnoremap _<tab> i<tab><esc>
:nnoremap _<CR> i<CR><esc>
:nmap ; :
:let mapleader = ","
:let maplocalleader = "\\"
:nnoremap cp :let @+ = expand("%") <cr>
:nnoremap <leader>ev :split $MYVIMRC<cr>/Mapping<cr>zt
:nnoremap <leader>ep :split $general/bashProfile/pocketknife.sh<cr>/Mapping<cr>zt
":nnoremap <leader>sv :source $MYVIMRC<cr> :call webdevicons#refresh()<cr>
:nnoremap <leader>epo :split $general/bashProfile/pocketknife.sh<cr>G
:nnoremap <leader>nt :NERDTreeToggle<cr>
:nnoremap <leader>nf :NERDTreeFocus<cr>
" :nnoremap ,., :w :b#<::cr>
nnoremap <leader>" bdwi""<Esc>hp
nnoremap <leader>{ bdwi{}<Esc>hp
:nnoremap <leader>p :CtrlPTag
:nnoremap <leader>= :vertical resize +10<cr>
:nnoremap <leader>- :vertical resize -10<cr>
:nnoremap <leader><leader>= :resize +10<cr>
:nnoremap <leader><leader>- :resize -10<cr>
" provide hjkl movements in Insert mode via the <Alt> modifier key
:inoremap <m-e> <Esc>A
:inoremap <m-l> <Esc>la
:inoremap <m-h> <Esc>ha
:inoremap <m-j> <Esc>ji
:inoremap <m-k> <Esc>ki
:inoremap ;; :<cr>
:nnoremap <m-e> $
:nnoremap <m-w> W
:nnoremap <m-b> ^
:nnoremap <leader>h :hide
:vnoremap <leader>n y :.,$s/<c-r>"//gc<Left><Left><Left>
:nnoremap <leader>n viwy :.,$s/<c-r>"//gc<Left><Left><Left>
:nnoremap <leader>b :CtrlPBuffer<cr>
:nnoremap <leader>e 10<C-e>
:nnoremap <leader>[ :execute "ptag " . expand("<cword>")<CR>
:nnoremap <leader>" <Right>Bi"<Esc>Ea"<Esc> 
" :nnoremap uio :UltiSnipsEdit<CR>

"General
:set t_ut=
:set rnu
:set nu
:set cursorline
hi NonText guifg=bg
:set encoding=utf8
:set laststatus=2
set nocompatible              " be iMproved, required
set clipboard=unnamedplus
filetype on
filetype plugin on
filetype indent on
syntax enable
:set textwidth=0 
:set wrapmargin=0
:set nowrap
:set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
autocmd FileType python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
" augroup Python
"     autocmd!
"     autocmd Filetype python setlocal tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
" augroup END
:set showtabline=2
:set backspace=2
:set scroll=15
set splitbelow
set splitright
:set autowrite
:set ignorecase
:set smartcase
" :set showtabline=0
:set foldignore=
:set hidden
:set ssop=blank,buffers,sesdir,folds,tabpages,winpos,winsize

"to highlight (["
:let OPTION_NAME = 1
autocmd FileType * call <SID>def_base_syntax() " autocmd Syntax may be better
function! s:def_base_syntax()
	" Simple example
	syntax match commonOperator "\(+\|=\|-\|\^\|\*\)"
	syntax match baseDelimiter ","
	hi link commonOperator Operator
	hi link baseDelimiter Special
endfunction

"Nerdtree
" autocmd FileType nerdtree setlocal nolist
" function! StartUp()
"     if 0 == argc()
"         NERDTree
"     end
" endfunction
"NerdTree starter
" autocmd VimEnter * call StartUp()
let g:NERDTreeDirArrowExpandable="+"
let g:NERDTreeDirArrowCollapsible="~"
:let g:NERDTreeWinSize=34
:let g:NERDTreeMinimalUI=1
:let NERDTreeHijackNetrw=0
" enable line numbers
let NERDTreeShowLineNumbers=1
" make sure relative line numbers are used
autocmd FileType nerdtree setlocal relativenumber
let NERDTreeIgnore = ['\.pyc$', '__pycache__', 'tags$']

"CtrlP fuzzy finder
let g:ctrlp_follow_symlinks = 2
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_show_hidden = 1

"UltiSnips
let g:UltiSnipsExpandTrigger="<c-a>"
let g:UltiSnipsListSnippets="<c-u>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="horizontal"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "felidadae_snippets"]
let g:UltiSnipsSnippetsDir="~/.vim/felidadae_snippets"

"easy-motion
map ,. <Plug>(easymotion-prefix)

"Intendation
set foldmethod=indent
set foldtext=MyFoldText()
function! MyFoldText()
	let i = indent(v:foldstart)
	return repeat(' ', i) . "----Folded----" 
endfunction
set foldlevel=3

"Wipeout not used buffers
command! -bang Wipeout :call Wipeout(<bang>0)
function! Wipeout(bang)
	" figure out which buffers are visible in any tab
	let visible = {}
	for t in range(1, tabpagenr('$'))
		for b in tabpagebuflist(t)
			let visible[b] = 1
		endfor
	endfor
	" close any buffer that are loaded and not visible
	let l:tally = 0
	let l:cmd = 'bw'
	if a:bang
		let l:cmd .= '!'
	endif
	for b in range(1, bufnr('$'))
		if buflisted(b) && !has_key(visible, b)
			let l:tally += 1
			exe l:cmd . ' ' . b
		endif
	endfor
	echon "Deleted " . l:tally . " buffers"
endfun

:let g:session_autosave = 'no'

" x-st column is magenta if there is a char
autocmd BufNewFile,BufRead *.py highlight ColorColumn ctermbg=magenta
autocmd BufNewFile,BufRead *.py call matchadd('ColorColumn', '\%100v', 100)

" ycm to set python version
let g:ycm_python_binary_path = '/usr/bin/python3'

" vim-session
set sessionoptions-=options
set sessionoptions-=help
set sessionoptions-=buffers

"Needed to be on the end of the file
:highlight nontext ctermfg=bg 
:hi folded term=none cterm=none ctermfg=none ctermbg=none
:hi foldcolumn ctermbg=none
:set fillchars="fold: " 
:set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab

