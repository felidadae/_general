##
#File I/O
##
snippet openFile "Open file with context" b
with open(${1:filename}, 'r') as fref_$1:
endsnippet

snippet  
endsnippet





###
# @Regex
###
snippet regexFindFirst "Search for regex in string" b
s = re.search("${1:pattern}", ${2:string})
if s: 
	${3:capturedValue} = s.group(1)
${0}
endsnippet

snippet regexFindFirstAssert "Search for regex in string" b
s = re.search("${1:pattern}", ${2:string})
assert(bool(s) == True)
${3:capturedValue} = s.group(1)
${0}
endsnippet

snippet regexFindAll "Search for regex and return array of all matches" b
results = re.findall("${1:pattern}", ${2:string}, re.X)
if len(results):
	for matches in results:
		# captured groups are in matches
		${3:pass}
endsnippet

snippet ifMatchRegex "If string match the regex" b
if re.match("${1:pattern}", ${2:string}):
	${0}
endsnippet

snippet regexSplit "Split string on regex" b
import re
${1:splitted} = re.split("${2:pattern}", ${3:string} )
endsnippet





###
# @Others
###
snippet breakpoint "ipdb breakpoint" b
import ipdb; ipdb.set_trace()
endsnippet

snippet measureExecutionTime "to measure time execution" b
import time
def timeTest__${1}():
	def ${1:fun}():
		${2:YourCodeToTest}

	t0 = time.time()
	for i in xrange(1,${3:100}):
		${1}()
	t1 = time.time()
	print "Function ${1} has taken " + str((t1-t0)/${3}) + "[s]"
endsnippet

snippet currDate "current date string" b
import datetime
t_ = datetime.datetime.strftime(datetime.datetime.now(), '%Y%m%d%H%M')
endsnippet

snippet currPos "Position of this python file" b
import os
pathIn  = (os.path.dirname(os.path.abspath(__file__))
			+ "/${1:subdirectory}")
endsnippet

snippet standardImport "Standard imports for python" b
import sys
import os
import re
import subprocess
endsnippet

snippet ,l "length" b
len(${1:list})
endsnippet

snippet ,a "append to list" b
${1:list}.append(${2:elementtoadd})
endsnippet

snippet setCurrentDirectoryToTheFile "set current directory (os.getcwd() os.chdir()) to the file" b
import os
path_to_curr_file = os.path.dirname(os.path.abspath(__file__))
os.chdir(path_to_curr_file)
endsnippet

snippet appendPath "append to sys.path new path; check os.getcwd()" b
import sys
sys.path.append("${1}")
endsnippet


snippet argparse "argparse for a script"
import argparse
from argparse import RawTextHelpFormatter
class bcolors:
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'

current_module = sys.modules[__name__]
parser = argparse.ArgumentParser(
	description=bcolors.WARNING + current_module.__doc__ + bcolors.ENDC, 
	formatter_class=RawTextHelpFormatter)

parser.add_argument('argumentname', type=str, help="grammars apps directory")
args = parser.parse_args()
endsnippet





####
# @bashlike
####
snippet rmr "" b
import shutil
shutil.rmtree(${1:directoryToRemove})
endsnippet

snippet currPos "get full path to the current file" b
import os 
dir_path = os.path.dirname(os.path.realpath(__file__))
endsnippet

snippet mkdirr "" b
import os
os.makedirs(${1:pathToDir})
endsnippet

snippet ifFileExists "" b
import os
if os.path.isfile(${1:fileName}):
	${0}
endsnippet

snippet rm "" b
import os
os.remove(${1:pathToFile})
endsnippet

snippet ls "" b
import os
os.listdir(${1:pathToDir})
endsnippet

snippet callScript "" b
fullPathToScript = ${1}
p = subprocess.Popen(
	["/bin/bash", 
		fullPathToScript,
		${2:arg1},
		${3:arg2}
	],
	stdout=subprocess.PIPE
)
output, err = p.communicate()
returncode = p.returncode
endsnippet

snippet callShell "" b
import subprocess, re
p = subprocess.Popen(re.split("\s+", "${1:command}"), stdout=subprocess.PIPE)
out, err = p.communicate()
endsnippet

snippet pwd "current working directory" b
import os
cwd = os.getcwd()
endsnippet

snippet cd "change current working directory" b
import os
os.chdir(${1:path})
endsnippet
