##### @Colors
snippet defineColors "Define colors: red,yellow,green,nc" b
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m'
endsnippet

snippet defineColorLogs "MessageError|Success|Info" b
function MessageError   { printf "${RED}[Error]${NC} \$1\n"; }
function MessageSuccess { printf "${GREEN}[Success]${NC} \$1\n"; }
function MessageInfo    { printf "${YELLOW}[Info]${NC} \$1\n"; }
endsnippet



##### @Perl
snippet perlInlineWithoutPrinting "perl -ni -e" b
perl -ni -e $0  
endsnippet

snippet perlInlineWithPrinting "perl -pi -e" b
perl -pi -e $0  
endsnippet

snippet perlNotRegex "perl" b
perl -pi -e  's/  \Q${1:string}\E  /  ${2:/*NO NEED TO do that*/}  /gx' "\$${3:file}" 
endsnippet

snippet perlNotRegexUniwersal "Just need to escape single tick" b
export ___FROM='${1:FROM}'
export ___TO='${2:TO}'
perl -pe $'$from=quotemeta($ENV{\'___FROM\'}); $to=($ENV{\'___TO\'}); s/$from/$to/g;' $in > $out
endsnippet

snippet perlENV "" b
export ${1:bashVariable}
perl -pi -e  's/ \$ENV\{${1}\} / ${2:replaceWith} /gx' "\$${3:file}" 
endsnippet

snippet perlInline "" b
perl -pi -e   's/  ${1:regex}  /  ${2:substitution}  /gx'   "\$${3:fileToModify}"
endsnippet

# snippet perlFilterIntoVariable "filter line and save result to bash variable" b
# ${1:varName}=$( ${2:input} | perl -ne 'if ($_ =~ / ${3:regex} /x) {print \$1;}')
# endsnippet
snippet perlPatternIntoVar_short "search for a pattern in a file and set to variable" b
${1:varName}=$( cat ${2:infile} | perl -ne 'print ${4:numOfCapturedGroup} if /${3:pattern}/;')
endsnippet


snippet perlRegexVariable "Regex variable with perl oneliner" b
matches=$(echo ${1:variable} | perl -pe 's/ .*().* /\1\t\2/gx')
match1=$(echo -e "$matches" | cut -f1)
match2=$(echo -e "$matches" | cut -f2)
endsnippet



##### @loops @for
snippet forls "for each file in a directory" b
for ifile in ${1:~}/*; do
	[ -e "\$ifile" ] || continue
	$0
done
endsnippet

snippet forEachArray "for each element in an array" b
for el in "\$\{${1:arrayname}[@]\}"
do
   ${0}
done
endsnippet

snippet forarray "For-loop iterating through array additionaly with counter;" b
i=0
for el in "\${${1:ArrayName}[@]}"
do
	${0}
	i=\$((i+1))
done
endsnippet



##### @general @bashing
snippet tmp "mktemp tool to manage tmp files" b
local __tmp__=$(mktemp)
rm $__tmp__
endsnippet

snippet redirectToDevNull "redirect to a trash" b
> /dev/null 2>&1
endsnippet

snippet currPos "" b
scriptPath_${1:id}="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
cd "$scriptPath_$1"
endsnippet

snippet currRepo "Path to this repository root directory" b
currentRepoRootDir=$(git rev-parse --show-toplevel)
endsnippet

snippet $ "quote variable"
"\$${1:NAME}" $0
endsnippet

snippet fun "" b
function ${1:funName} {
	$0
}
endsnippet

snippet copyArrayToANewVariable "Copy array to another variable" b
${2:destiny}=("\${${1:source}[@]}")
endsnippet

snippet createArrayFromFindResult "To create bash array from find result" b
${1:array}=()
while IFS=  read -r -d $'\0'; do
	$1+=("$REPLY")
done < <(find . -name ${2:pattern} -print0)
endsnippet

snippet dateYYYYMMDD "YYYYMMDD" b
today=\`date +%Y%m%d\`
endsnippet

snippet getFilenameAndExtension "from path get filebasename and extension" b
fileBaseName="\${${1:fullFilePath}%.*}"
extension="\${${1}##*.}"
endsnippet

snippet ifSubstringContains "if a string is a substring of an another string" b
[[ "\$${1:string}" == *"\$${2:substring}"* ]]
endsnippet

snippet forlineinfile "for each file in a file" b
while read line
do
	[ "$line" == "" ] && continue
	echo "$line"
done < ${1:in_file}
endsnippet

#ssh
snippet scp "scp to remote with port and ssh key" b 
USER=
IP=
SSH_PORT=
source=
destiny=
scp -P $SSH_PORT -i ~/.ssh/id_rsa ${1:fileFromClient} $USER@$IP:$destiny
endsnippet
